/* eslint-disable */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601DateTime: { input: string; output: string; }
}

/** Autogenerated input type of CreateComment */
export interface CreateCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  coubId: Scalars['Int']['input'];
  message: Scalars['String']['input'];
  parentPostId?: InputMaybe<Scalars['String']['input']>;
  userApiToken: Scalars['String']['input'];
  userChannelId: Scalars['Int']['input'];
}

/** Autogenerated input type of CreateEntityComment */
export interface CreateEntityCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityId: Scalars['ID']['input'];
  entityType: Entity;
  message: Scalars['String']['input'];
  parentPostId?: InputMaybe<Scalars['String']['input']>;
  userApiToken: Scalars['String']['input'];
  userChannelId: Scalars['Int']['input'];
}

/** Autogenerated input type of CreateReportOnComment */
export interface CreateReportOnCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  disqusCommentId: Scalars['String']['input'];
  userApiToken: Scalars['String']['input'];
  userChannelId: Scalars['Int']['input'];
}

export interface DisqusAuthor {
  avatar?: Maybe<DisqusAuthorAvatar>;
  coubcomChannelId?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  profileUrl?: Maybe<Scalars['String']['output']>;
}

export interface DisqusAuthorAvatar {
  cache?: Maybe<Scalars['String']['output']>;
  permalink?: Maybe<Scalars['String']['output']>;
}

export interface DisqusComment {
  author?: Maybe<DisqusAuthor>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  disqusCommentId: Scalars['String']['output'];
  hasChildren?: Maybe<Scalars['Boolean']['output']>;
  isDeleted?: Maybe<Scalars['Boolean']['output']>;
  isEdited?: Maybe<Scalars['Boolean']['output']>;
  isReported?: Maybe<Scalars['Boolean']['output']>;
  message: Scalars['String']['output'];
  parentPostId?: Maybe<Scalars['String']['output']>;
}

export interface DisqusCursor {
  hasNext: Scalars['Boolean']['output'];
  next?: Maybe<Scalars['String']['output']>;
}

export interface DisqusThread {
  commentsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['String']['output'];
  identifiers?: Maybe<Array<Scalars['String']['output']>>;
}

export interface DisqusThreadComments {
  comments: Array<DisqusComment>;
  cursor: DisqusCursor;
}

export enum Entity {
  Coub = 'COUB',
  Story = 'STORY'
}

export interface Mutation {
  createComment: DisqusComment;
  createEntityComment: DisqusComment;
  createReportOnComment: DisqusComment;
  removeComment: RemovedComment;
  updateComment: DisqusComment;
}


export interface MutationCreateCommentArgs {
  input: CreateCommentInput;
}


export interface MutationCreateEntityCommentArgs {
  input: CreateEntityCommentInput;
}


export interface MutationCreateReportOnCommentArgs {
  input: CreateReportOnCommentInput;
}


export interface MutationRemoveCommentArgs {
  input: RemoveCommentInput;
}


export interface MutationUpdateCommentArgs {
  input: UpdateCommentInput;
}

export interface Query {
  /** Get comment details */
  commentDetails: DisqusComment;
  /** Get comment translation */
  commentTranslation: Translation;
  /** Get entity comments */
  entityComments: DisqusThreadComments;
  /** Get coub comments */
  threadComments: DisqusThreadComments;
  /** Get thread details */
  threadDetails: DisqusThread;
}


export interface QueryCommentDetailsArgs {
  disqusCommentId: Scalars['String']['input'];
}


export interface QueryCommentTranslationArgs {
  externalId: Scalars['String']['input'];
  language: Scalars['String']['input'];
}


export interface QueryEntityCommentsArgs {
  cursorNext?: InputMaybe<Scalars['String']['input']>;
  entityId: Scalars['ID']['input'];
  entityType: Entity;
  limit?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<SortOrder>;
  parentPostId?: InputMaybe<Scalars['String']['input']>;
}


export interface QueryThreadCommentsArgs {
  coubId: Scalars['Int']['input'];
  cursorNext?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<SortOrder>;
  parentPostId?: InputMaybe<Scalars['String']['input']>;
}


export interface QueryThreadDetailsArgs {
  coubId?: InputMaybe<Scalars['Int']['input']>;
  entityId?: InputMaybe<Scalars['ID']['input']>;
  entityType?: InputMaybe<Scalars['String']['input']>;
}

/** Autogenerated input type of RemoveComment */
export interface RemoveCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  disqusCommentId: Scalars['String']['input'];
  userApiToken: Scalars['String']['input'];
  userChannelId: Scalars['Int']['input'];
}

export interface RemovedComment {
  disqusCommentId: Scalars['String']['output'];
}

export enum SortOrder {
  Asc = 'asc',
  Desc = 'desc'
}

export interface Translation {
  translation?: Maybe<Scalars['String']['output']>;
}

/** Autogenerated input type of UpdateComment */
export interface UpdateCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  disqusCommentId: Scalars['String']['input'];
  message: Scalars['String']['input'];
  userApiToken: Scalars['String']['input'];
  userChannelId: Scalars['Int']['input'];
}

export type CommentFieldsFragment = {
  __typename: 'DisqusComment',
  createdAt?: string | null,
  disqusCommentId: string,
  hasChildren?: boolean | null,
  isDeleted?: boolean | null,
  isEdited?: boolean | null,
  isReported?: boolean | null,
  message: string,
  parentPostId?: string | null,
  author?: {
    __typename: 'DisqusAuthor',
    coubcomChannelId?: string | null,
    name?: string | null,
    profileUrl?: string | null,
    avatar?: {
      __typename: 'DisqusAuthorAvatar',
      cache?: string | null,
      permalink?: string | null
    } | null
  } | null
};

export type EntityCommentsQueryVariables = Exact<{
  entityId: Scalars['ID']['input'];
  entityType: Entity;
  cursorNext?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<SortOrder>;
  parentPostId?: InputMaybe<Scalars['String']['input']>;
}>;


export type EntityCommentsQuery = {
  entityComments: {
    __typename: 'DisqusThreadComments',
    cursor: {
      __typename: 'DisqusCursor',
      next?: string | null,
      hasNext: boolean
    },
    comments: Array<(
      {
      __typename: 'DisqusComment'
    }
      & CommentFieldsFragment
    )>
  }
};
